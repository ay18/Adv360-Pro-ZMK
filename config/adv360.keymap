#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1     &kp N2              &kp N3          &kp N4      &kp N5   &none                                                                 &mo 4        &kp N6   &kp N7           &kp N8           &kp N9        &kp N0         &kp BACKSPACE
&kp TAB    &kp Q      &kp W               &lt 6 E         &lt 2 R     &kp T    &none                                                                 &none        &kp Y    &kp U            &kp I            &kp O         &kp P          &kp BSLH
&kp ESC    &kp A      &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LGUI F  &lt 3 G  &none            &none         &none      &none          &none        &none        &lt 3 H  &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RCTRL L   &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z      &kp X               &kp C           &kp V       &kp B                                   &none      &kp PAGE_UP                              &kp N    &kp M            &kp COMMA        &kp DOT       &kp FSLH       &kp RSHFT
&kp LCTRL  &kp LCTRL  &mo 3               &kp LALT        &kp LGUI             &lt 5 BACKSPACE  &lt 1 DELETE  &none      &kp PAGE_DOWN  &lt 6 ENTER  &lt 5 SPACE           &kp LEFT         &kp DOWN         &kp UP_ARROW  &kp RIGHT      &kp RCTRL
            >;
        };

        navigation {
            bindings = <
&none  &none  &none                     &none                              &none                           &none  &none                                  &none  &none  &none     &none         &none      &none  &none
&none  &none  &kp LG(UP_ARROW)          &kp LG(LEFT)                       &kp LG(RIGHT)                   &none  &none                                  &none  &none  &none     &kp UP_ARROW  &none      &none  &none
&none  &none  &hm LCTRL LG(DOWN_ARROW)  &hm LEFT_ALT LS(LG(LEFT_BRACKET))  &hm LCMD LS(LG(RIGHT_BRACKET))  &none  &none  &none  &none      &none  &none  &none  &none  &kp LEFT  &kp DOWN      &kp RIGHT  &none  &none
&none  &none  &none                     &kp LA(SEMICOLON)                  &kp LA(SQT)                     &none                &none      &none                &none  &none     &none         &none      &none  &none
&none  &none  &none                     &none                              &none                                  &none  &none  &none      &none  &none  &none         &none     &none         &none      &none  &none
            >;
        };

        numpad {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none         &kp SLASH     &kp ASTERISK  &kp MINUS  &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &kp N7        &kp N8        &kp N9        &kp PLUS   &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &none
&none  &none  &none  &none  &none  &none                &none      &none                &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ENTER  &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none         &kp NUMBER_0  &kp N0        &kp PERIOD    &kp ENTER  &none
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 0                                  &mo 4  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &none   &none   &none   &none   &none   &none                                   &none  &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none   &none   &none   &none  &none      &none  &none  &none  &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none   &none                  &none      &none                &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none           &none   &none  &none      &none  &none  &none          &none   &none   &none    &none    &none
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans           &none  &none     &none         &none      &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader      &none  &none     &none         &none      &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &none            &none  &none     &none         &none      &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                    &none  &none     &kp UP_ARROW  &none      &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG         &kp LEFT  &kp DOWN      &kp RIGHT  &none  &none
            >;
        };

        symbols {
            bindings = <
&none  &kp C_BRI_DN  &kp C_BRI_UP                  &none                          &kp LG(LC(SPACE))           &none      &none                                          &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_MUTE           &kp C_VOL_DN   &kp C_VOLUME_UP    &none
&none  &none         &kp AT_SIGN                   &kp LEFT_BRACKET               &kp RIGHT_BRACKET           &kp PIPE   &none                                          &none           &kp AMPERSAND     &kp UNDERSCORE   &kp PLUS             &kp ASTERISK   &none              &none
&none  &kp CARET     &hm LEFT_CONTROL EXCLAMATION  &hm LEFT_ALT LEFT_PARENTHESIS  &hm LGUI RIGHT_PARENTHESIS  &kp GRAVE  &none          &none  &none      &none  &none  &none           &kp COLON         &hm RMETA MINUS  &hm RIGHT_ALT EQUAL  &hm RCTRL SQT  &kp DOUBLE_QUOTES  &none
&none  &kp HASH      &kp PERCENT                   &kp LEFT_BRACE                 &kp RIGHT_BRACE             &kp TILDE                        &none      &none                         &kp DOLLAR        &kp LESS_THAN    &kp GREATER_THAN     &kp QUESTION   &kp SLASH          &none
&none  &none         &none                         &none                          &none                                  &kp BACKSPACE  &none  &none      &none  &none  &none                             &none            &none                &none          &none              &none
            >;
        };

        window_control {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &trans            &trans                &kp LG(LC(C))             &trans                     &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &trans            &kp LC(LA(NUMBER_0))  &kp LC(LA(MINUS))         &kp LC(LA(EQUAL))          &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none      &none  &none  &trans  &kp LC(LA(LEFT))  &kp LG(LA(P))         &kp LG(LA(LEFT_BRACKET))  &kp LG(LA(RIGHT_BRACKET))  &kp LC(LA(RIGHT))  &trans
&trans  &trans  &trans  &trans  &trans  &trans                 &none      &none                 &trans            &kp LA(LC(P))         &kp LA(LC(LEFT_BRACKET))  &kp LA(LC(RIGHT_BRACKET))  &trans             &trans
&trans  &trans  &trans  &trans  &trans          &none   &none  &none      &none  &none  &none                     &kp LA(LG(LEFT))      &trans                    &kp LA(LG(RIGHT))          &kp LA(LG(SLASH))  &trans
            >;
        };
    };
};
