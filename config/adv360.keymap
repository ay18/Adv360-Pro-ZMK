#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        arrow_symbol: arrow_symbol_stack {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mo 5 &mo 6>;
            label = "ARROW_SYMBOL_STACK";
        };

        #endif

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-key-positions = <35 36 52 65 66 67 37 38 53 68 69 70 7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        arrow_symbol_stack_ht: arrow_symbol_stack_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROW_SYMBOL_STACK_HT";
            bindings = <&arrow_symbol>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    macros {
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1        &kp N2   &kp N3       &kp N4       &kp N5  &none                                                                 &mo 4                           &kp N6  &kp N7       &kp N8       &kp N9   &kp N0           &kp BACKSPACE
&kp TAB    &kp Q         &kp W    &kp E        &kp R        &kp T   &none                                                                 &none                           &kp Y   &kp U        &kp I        &kp O    &kp P            &kp BSLH
&kp ESC    &hml LCTRL A  &lt 3 S  &hml LALT D  &hml LGUI F  &kp G   &none            &none         &none      &none          &none        &none                           &kp H   &hmr RCMD J  &hmr RALT K  &lt 3 L  &hmr RCTRL SEMI  &kp SQT
&kp LSHFT  &kp Z         &kp X    &kp C        &kp V        &kp B                                  &none      &kp PAGE_UP                                                 &kp N   &kp M        &kp COMMA    &kp DOT  &kp FSLH         &kp RSHFT
&none      &none         &none    &none        &none                &lt 5 BACKSPACE  &lt 1 DELETE  &none      &kp PAGE_DOWN  &lt 7 ENTER  &arrow_symbol_stack_ht 0 SPACE          &none        &none        &none    &none            &none
            >;
        };

        navigation {
            bindings = <
&none  &none  &none             &none              &none                      &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp LG(UP_ARROW)  &kp LG(LEFT)       &kp LG(RIGHT)              &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp LG(DOWN)      &kp LS(LG(LBKT))   &kp LG(LS(RIGHT_BRACKET))  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none             &kp LA(SEMICOLON)  &kp LA(SQT)                &none                &none      &none                &none  &none  &none  &none  &none  &none
&none  &none  &none             &none              &none                             &none  &none  &none      &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        numpad {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none         &kp SLASH     &kp ASTERISK  &kp MINUS  &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &kp N7        &kp N8        &kp N9        &kp PLUS   &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &none
&none  &none  &none  &none  &none  &none                &none      &none                &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ENTER  &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none         &kp NUMBER_0  &kp N0        &kp PERIOD    &kp ENTER  &none
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 0                                             &mo 4      &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &none   &none   &none   &none   &none   &none                                              &none      &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none   &none   &none          &none  &none      &none  &none      &none      &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none   &none                         &none      &none                        &none   &none   &none   &none    &none    &none
&none   &none   &none   &none   &none           &kp BACKSPACE  &none  &none      &none  &kp ENTER  &kp SPACE          &none   &none   &none    &none    &none
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans           &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader      &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &none            &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                    &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG         &none  &none  &none  &none  &none
            >;
        };

        symbols {
            bindings = <
&none  &kp C_BRI_DN      &kp C_BRI_UP  &none                       &kp LG(LC(SPACE))            &none      &none                                  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_MUTE        &kp C_VOL_DN      &kp C_VOLUME_UP           &none
&none  &none             &kp AT_SIGN   &kp LEFT_BRACKET            &kp RIGHT_BRACKET            &kp PIPE   &none                                  &none           &kp AMPERSAND     &kp UNDERSCORE   &kp PLUS          &kp ASTERISK      &none                     &none
&none  &hml LCTRL CARET  &kp EXCL      &hml LALT LEFT_PARENTHESIS  &hml LCMD RIGHT_PARENTHESIS  &kp GRAVE  &none  &none  &none      &none  &none  &none           &kp COLON         &hmr RCMD MINUS  &hmr RALT EQUAL   &kp SINGLE_QUOTE  &hmr RCTRL DOUBLE_QUOTES  &none
&none  &kp HASH          &kp PERCENT   &kp LEFT_BRACE              &kp RIGHT_BRACE              &kp TILDE                &none      &none                         &kp DOLLAR        &kp LESS_THAN    &kp GREATER_THAN  &kp QUESTION      &kp SLASH                 &none
&none  &none             &none         &none                       &none                                   &none  &none  &none      &none  &none  &none                             &none            &none             &none             &none                     &none
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans    &kp UP_ARROW  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans    &trans        &trans     &trans  &trans
            >;
        };

        window_control {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none             &none                 &kp LG(LC(C))             &none                      &none              &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none             &kp LC(LA(NUMBER_0))  &kp LC(LA(MINUS))         &kp LC(LA(EQUAL))          &none              &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &kp LC(LA(LEFT))  &kp LG(LA(P))         &kp LG(LA(LEFT_BRACKET))  &kp LG(LA(RIGHT_BRACKET))  &kp LC(LA(RIGHT))  &none
&none  &none  &none  &none  &none  &none                &none      &none                &none             &kp LA(LC(P))         &kp LA(LC(LEFT_BRACKET))  &kp LA(LC(RIGHT_BRACKET))  &none              &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none                    &kp LA(LG(LEFT))      &none                     &kp LA(LG(RIGHT))          &kp LA(LG(SLASH))  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
